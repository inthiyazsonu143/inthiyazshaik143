{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "84fb2b08",
   "metadata": {
    "papermill": {
     "duration": 0.006649,
     "end_time": "2023-11-17T18:49:59.530595",
     "exception": false,
     "start_time": "2023-11-17T18:49:59.523946",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a46388c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:49:59.545153Z",
     "iopub.status.busy": "2023-11-17T18:49:59.544155Z",
     "iopub.status.idle": "2023-11-17T18:50:03.060754Z",
     "shell.execute_reply": "2023-11-17T18:50:03.059079Z"
    },
    "papermill": {
     "duration": 3.526562,
     "end_time": "2023-11-17T18:50:03.063309",
     "exception": false,
     "start_time": "2023-11-17T18:49:59.536747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# importing Stopwords\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import string\n",
    "\n",
    "# models\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# train test split\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "# Pipeline\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# score\n",
    "from sklearn.metrics import confusion_matrix,classification_report,ConfusionMatrixDisplay\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eeae13d",
   "metadata": {
    "papermill": {
     "duration": 0.005792,
     "end_time": "2023-11-17T18:50:03.075284",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.069492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bdbc6791",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.089478Z",
     "iopub.status.busy": "2023-11-17T18:50:03.088939Z",
     "iopub.status.idle": "2023-11-17T18:50:03.257305Z",
     "shell.execute_reply": "2023-11-17T18:50:03.256125Z"
    },
    "papermill": {
     "duration": 0.178634,
     "end_time": "2023-11-17T18:50:03.259842",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.081208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/kaggle/input/spam-ham-dataset/spam_dataset.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m df\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/spam-ham-dataset/spam_dataset.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:912\u001b[0m, in \u001b[0;36mread_csv\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[0;32m    899\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[0;32m    900\u001b[0m     dialect,\n\u001b[0;32m    901\u001b[0m     delimiter,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    908\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[0;32m    909\u001b[0m )\n\u001b[0;32m    910\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[1;32m--> 912\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _read(filepath_or_buffer, kwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:577\u001b[0m, in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    574\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m    576\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[1;32m--> 577\u001b[0m parser \u001b[38;5;241m=\u001b[39m TextFileReader(filepath_or_buffer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    579\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[0;32m    580\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1407\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m   1404\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1406\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1407\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_engine(f, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1661\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[1;34m(self, f, engine)\u001b[0m\n\u001b[0;32m   1659\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[0;32m   1660\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1661\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m get_handle(\n\u001b[0;32m   1662\u001b[0m     f,\n\u001b[0;32m   1663\u001b[0m     mode,\n\u001b[0;32m   1664\u001b[0m     encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mencoding\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1665\u001b[0m     compression\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcompression\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1666\u001b[0m     memory_map\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmemory_map\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m),\n\u001b[0;32m   1667\u001b[0m     is_text\u001b[38;5;241m=\u001b[39mis_text,\n\u001b[0;32m   1668\u001b[0m     errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mencoding_errors\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstrict\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1669\u001b[0m     storage_options\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstorage_options\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m   1670\u001b[0m )\n\u001b[0;32m   1671\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1672\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:859\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    854\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    855\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[0;32m    856\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[0;32m    857\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[0;32m    858\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[1;32m--> 859\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(\n\u001b[0;32m    860\u001b[0m             handle,\n\u001b[0;32m    861\u001b[0m             ioargs\u001b[38;5;241m.\u001b[39mmode,\n\u001b[0;32m    862\u001b[0m             encoding\u001b[38;5;241m=\u001b[39mioargs\u001b[38;5;241m.\u001b[39mencoding,\n\u001b[0;32m    863\u001b[0m             errors\u001b[38;5;241m=\u001b[39merrors,\n\u001b[0;32m    864\u001b[0m             newline\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    865\u001b[0m         )\n\u001b[0;32m    866\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    867\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[0;32m    868\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/spam-ham-dataset/spam_dataset.csv'"
     ]
    }
   ],
   "source": [
    "df=pd.read_csv('/kaggle/input/spam-ham-dataset/spam_dataset.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d3fd333",
   "metadata": {
    "papermill": {
     "duration": 0.006132,
     "end_time": "2023-11-17T18:50:03.272209",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.266077",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Basic Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91318311",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.285966Z",
     "iopub.status.busy": "2023-11-17T18:50:03.285600Z",
     "iopub.status.idle": "2023-11-17T18:50:03.308292Z",
     "shell.execute_reply": "2023-11-17T18:50:03.307540Z"
    },
    "papermill": {
     "duration": 0.031831,
     "end_time": "2023-11-17T18:50:03.309961",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.278130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2313123",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.326123Z",
     "iopub.status.busy": "2023-11-17T18:50:03.325444Z",
     "iopub.status.idle": "2023-11-17T18:50:03.345868Z",
     "shell.execute_reply": "2023-11-17T18:50:03.344838Z"
    },
    "papermill": {
     "duration": 0.030035,
     "end_time": "2023-11-17T18:50:03.347769",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.317734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7439d171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.363450Z",
     "iopub.status.busy": "2023-11-17T18:50:03.362395Z",
     "iopub.status.idle": "2023-11-17T18:50:03.376910Z",
     "shell.execute_reply": "2023-11-17T18:50:03.376034Z"
    },
    "papermill": {
     "duration": 0.024234,
     "end_time": "2023-11-17T18:50:03.378626",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.354392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfb3d46e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.394430Z",
     "iopub.status.busy": "2023-11-17T18:50:03.393104Z",
     "iopub.status.idle": "2023-11-17T18:50:03.419394Z",
     "shell.execute_reply": "2023-11-17T18:50:03.418330Z"
    },
    "papermill": {
     "duration": 0.036655,
     "end_time": "2023-11-17T18:50:03.422068",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.385413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f002206c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.437715Z",
     "iopub.status.busy": "2023-11-17T18:50:03.437333Z",
     "iopub.status.idle": "2023-11-17T18:50:03.450774Z",
     "shell.execute_reply": "2023-11-17T18:50:03.449333Z"
    },
    "papermill": {
     "duration": 0.02397,
     "end_time": "2023-11-17T18:50:03.453078",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.429108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>label</th>\n",
       "      <th>text</th>\n",
       "      <th>label_num</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>605</td>\n",
       "      <td>ham</td>\n",
       "      <td>Subject: enron methanol ; meter # : 988291\\r\\n...</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2349</td>\n",
       "      <td>ham</td>\n",
       "      <td>Subject: hpl nom for january 9 , 2001\\r\\n( see...</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3624</td>\n",
       "      <td>ham</td>\n",
       "      <td>Subject: neon retreat\\r\\nho ho ho , we ' re ar...</td>\n",
       "      <td>0</td>\n",
       "      <td>2524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4685</td>\n",
       "      <td>spam</td>\n",
       "      <td>Subject: photoshop , windows , office . cheap ...</td>\n",
       "      <td>1</td>\n",
       "      <td>414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2030</td>\n",
       "      <td>ham</td>\n",
       "      <td>Subject: re : indian springs\\r\\nthis deal is t...</td>\n",
       "      <td>0</td>\n",
       "      <td>336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 label                                               text  \\\n",
       "0         605   ham  Subject: enron methanol ; meter # : 988291\\r\\n...   \n",
       "1        2349   ham  Subject: hpl nom for january 9 , 2001\\r\\n( see...   \n",
       "2        3624   ham  Subject: neon retreat\\r\\nho ho ho , we ' re ar...   \n",
       "3        4685  spam  Subject: photoshop , windows , office . cheap ...   \n",
       "4        2030   ham  Subject: re : indian springs\\r\\nthis deal is t...   \n",
       "\n",
       "   label_num  length  \n",
       "0          0     327  \n",
       "1          0      97  \n",
       "2          0    2524  \n",
       "3          1     414  \n",
       "4          0     336  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# adding new column as length of the text\n",
    "df['length'] = df['text'].apply(len)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef71d0da",
   "metadata": {
    "papermill": {
     "duration": 0.006609,
     "end_time": "2023-11-17T18:50:03.466902",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.460293",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6cee7080",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.482112Z",
     "iopub.status.busy": "2023-11-17T18:50:03.481660Z",
     "iopub.status.idle": "2023-11-17T18:50:03.764384Z",
     "shell.execute_reply": "2023-11-17T18:50:03.763208Z"
    },
    "papermill": {
     "duration": 0.292925,
     "end_time": "2023-11-17T18:50:03.766510",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.473585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of Spam and Ham')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot for count of spam and ham in data\n",
    "plt.figure(figsize=(14,6))\n",
    "sns.set_style('darkgrid')\n",
    "sns.countplot(x='label',data=df)\n",
    "plt.title('Number of Spam and Ham')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e9850ff9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:03.785382Z",
     "iopub.status.busy": "2023-11-17T18:50:03.784098Z",
     "iopub.status.idle": "2023-11-17T18:50:04.284543Z",
     "shell.execute_reply": "2023-11-17T18:50:04.283332Z"
    },
    "papermill": {
     "duration": 0.511738,
     "end_time": "2023-11-17T18:50:04.286539",
     "exception": false,
     "start_time": "2023-11-17T18:50:03.774801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Length of Text')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot for distribution lenth of text\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.histplot(x='length',data=df,bins=100)\n",
    "plt.title('Length of Text')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a0f4054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:04.304234Z",
     "iopub.status.busy": "2023-11-17T18:50:04.303313Z",
     "iopub.status.idle": "2023-11-17T18:50:04.312553Z",
     "shell.execute_reply": "2023-11-17T18:50:04.311836Z"
    },
    "papermill": {
     "duration": 0.020535,
     "end_time": "2023-11-17T18:50:04.314571",
     "exception": false,
     "start_time": "2023-11-17T18:50:04.294036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "949    Subject: fw : \" red , white and blue out \"\\r\\n...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# maximum lenth text \n",
    "df[df['length']==df['length'].max()]['text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f507af35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:04.331615Z",
     "iopub.status.busy": "2023-11-17T18:50:04.331285Z",
     "iopub.status.idle": "2023-11-17T18:50:05.040951Z",
     "shell.execute_reply": "2023-11-17T18:50:05.039982Z"
    },
    "papermill": {
     "duration": 0.720437,
     "end_time": "2023-11-17T18:50:05.042931",
     "exception": false,
     "start_time": "2023-11-17T18:50:04.322494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<Axes: title={'center': 'ham'}>, <Axes: title={'center': 'spam'}>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of spam and ham by length of text\n",
    "df.hist(column='length',by='label',figsize=(12,8))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c64105f",
   "metadata": {
    "papermill": {
     "duration": 0.007668,
     "end_time": "2023-11-17T18:50:05.058914",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.051246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Enginering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "329cb87e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:05.076759Z",
     "iopub.status.busy": "2023-11-17T18:50:05.076277Z",
     "iopub.status.idle": "2023-11-17T18:50:05.083439Z",
     "shell.execute_reply": "2023-11-17T18:50:05.081854Z"
    },
    "papermill": {
     "duration": 0.018668,
     "end_time": "2023-11-17T18:50:05.085401",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.066733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# function to remove punctuation and stopwords\n",
    "def text_process(text):\n",
    "    non_punc = [char for char in text if char not in string.punctuation]\n",
    "    non_punc=''.join(non_punc)\n",
    "    return [word for word in non_punc.split() if word not in stopwords.words('english')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de8a037",
   "metadata": {
    "papermill": {
     "duration": 0.007571,
     "end_time": "2023-11-17T18:50:05.101345",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.093774",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d410555f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:05.119592Z",
     "iopub.status.busy": "2023-11-17T18:50:05.119208Z",
     "iopub.status.idle": "2023-11-17T18:50:05.123827Z",
     "shell.execute_reply": "2023-11-17T18:50:05.122875Z"
    },
    "papermill": {
     "duration": 0.016938,
     "end_time": "2023-11-17T18:50:05.126107",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.109169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# define X(features),y(target)\n",
    "X= df['text']\n",
    "y=df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "63b16d06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:05.145919Z",
     "iopub.status.busy": "2023-11-17T18:50:05.144909Z",
     "iopub.status.idle": "2023-11-17T18:50:05.151879Z",
     "shell.execute_reply": "2023-11-17T18:50:05.150780Z"
    },
    "papermill": {
     "duration": 0.01853,
     "end_time": "2023-11-17T18:50:05.153743",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.135213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f34bc35c",
   "metadata": {
    "papermill": {
     "duration": 0.007658,
     "end_time": "2023-11-17T18:50:05.169793",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.162135",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8f280f61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:05.187464Z",
     "iopub.status.busy": "2023-11-17T18:50:05.187101Z",
     "iopub.status.idle": "2023-11-17T18:50:05.193169Z",
     "shell.execute_reply": "2023-11-17T18:50:05.191825Z"
    },
    "papermill": {
     "duration": 0.017971,
     "end_time": "2023-11-17T18:50:05.195778",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.177807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creating a pipline to model the data\n",
    "# pipeline for MultinomialNB\n",
    "pipe_mnb = Pipeline([\n",
    "    ('bow',CountVectorizer(analyzer=text_process)),\n",
    "    ('tf',TfidfTransformer()),\n",
    "    ('classifier',MultinomialNB())\n",
    "])\n",
    "\n",
    "# pipeline for Random Forest Classifier\n",
    "pipe_rf =Pipeline([\n",
    "    ('bow',CountVectorizer(analyzer=text_process)),\n",
    "    ('tf',TfidfTransformer()),\n",
    "    ('classifier',RandomForestClassifier())\n",
    "])\n",
    "\n",
    "# pipeline for Random Forest Classifier\n",
    "pipe_svc =Pipeline([\n",
    "    ('bow',CountVectorizer(analyzer=text_process)),\n",
    "    ('tf',TfidfTransformer()),\n",
    "    ('classifier',SVC())\n",
    "])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "42d51ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:50:05.214743Z",
     "iopub.status.busy": "2023-11-17T18:50:05.214359Z",
     "iopub.status.idle": "2023-11-17T18:52:55.493737Z",
     "shell.execute_reply": "2023-11-17T18:52:55.492363Z"
    },
    "papermill": {
     "duration": 170.298908,
     "end_time": "2023-11-17T18:52:55.503166",
     "exception": false,
     "start_time": "2023-11-17T18:50:05.204258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;bow&#x27;,\n",
       "                 CountVectorizer(analyzer=&lt;function text_process at 0x7c546e276c20&gt;)),\n",
       "                (&#x27;tf&#x27;, TfidfTransformer()), (&#x27;classifier&#x27;, SVC())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;bow&#x27;,\n",
       "                 CountVectorizer(analyzer=&lt;function text_process at 0x7c546e276c20&gt;)),\n",
       "                (&#x27;tf&#x27;, TfidfTransformer()), (&#x27;classifier&#x27;, SVC())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer(analyzer=&lt;function text_process at 0x7c546e276c20&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfTransformer</label><div class=\"sk-toggleable__content\"><pre>TfidfTransformer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('bow',\n",
       "                 CountVectorizer(analyzer=<function text_process at 0x7c546e276c20>)),\n",
       "                ('tf', TfidfTransformer()), ('classifier', SVC())])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fit the data\n",
    "pipe_mnb.fit(X_train,y_train)\n",
    "pipe_rf.fit(X_train,y_train)\n",
    "pipe_svc.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4534a1df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:52:55.521450Z",
     "iopub.status.busy": "2023-11-17T18:52:55.521038Z",
     "iopub.status.idle": "2023-11-17T18:54:19.414593Z",
     "shell.execute_reply": "2023-11-17T18:54:19.413234Z"
    },
    "papermill": {
     "duration": 83.905947,
     "end_time": "2023-11-17T18:54:19.417244",
     "exception": false,
     "start_time": "2023-11-17T18:52:55.511297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# predict the target feature\n",
    "pred_mnb = pipe_mnb.predict(X_test)\n",
    "pred_rf = pipe_rf.predict(X_test)\n",
    "pred_svc = pipe_svc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1938d72b",
   "metadata": {
    "papermill": {
     "duration": 0.008242,
     "end_time": "2023-11-17T18:54:19.434308",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.426066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8d06bb1c",
   "metadata": {
    "papermill": {
     "duration": 0.008138,
     "end_time": "2023-11-17T18:54:19.450981",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.442843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prediction Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fca03a2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:54:19.469767Z",
     "iopub.status.busy": "2023-11-17T18:54:19.469275Z",
     "iopub.status.idle": "2023-11-17T18:54:19.481296Z",
     "shell.execute_reply": "2023-11-17T18:54:19.480709Z"
    },
    "papermill": {
     "duration": 0.024246,
     "end_time": "2023-11-17T18:54:19.483379",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.459133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy for Multinomial Classifer: 91.73989455184535\n",
      "The accuracy for Random_forest Classifer: 97.4223784417106\n",
      "The accuracy for SVC: 98.82835383714118\n"
     ]
    }
   ],
   "source": [
    "print('The accuracy for Multinomial Classifer:',accuracy_score(y_test,pred_mnb)*100)\n",
    "print('The accuracy for Random_forest Classifer:',accuracy_score(y_test,pred_rf)*100)\n",
    "print('The accuracy for SVC:',accuracy_score(y_test,pred_svc)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86a61c18",
   "metadata": {
    "papermill": {
     "duration": 0.008025,
     "end_time": "2023-11-17T18:54:19.499873",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.491848",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**The SVC predicts better tham Random Forest Model and Multinomial.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "adc2446a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:54:19.576437Z",
     "iopub.status.busy": "2023-11-17T18:54:19.575863Z",
     "iopub.status.idle": "2023-11-17T18:54:19.624149Z",
     "shell.execute_reply": "2023-11-17T18:54:19.623467Z"
    },
    "papermill": {
     "duration": 0.060282,
     "end_time": "2023-11-17T18:54:19.626028",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.565746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report on SVC:\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         ham       1.00      0.99      0.99      1246\n",
      "        spam       0.97      0.99      0.98       461\n",
      "\n",
      "    accuracy                           0.99      1707\n",
      "   macro avg       0.98      0.99      0.99      1707\n",
      "weighted avg       0.99      0.99      0.99      1707\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print confusion matrix and classification report\n",
    "print ('Classification report on SVC:')\n",
    "print('\\n')\n",
    "print(classification_report(y_test,pred_svc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cef7bded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:54:19.645463Z",
     "iopub.status.busy": "2023-11-17T18:54:19.645070Z",
     "iopub.status.idle": "2023-11-17T18:54:19.880717Z",
     "shell.execute_reply": "2023-11-17T18:54:19.879331Z"
    },
    "papermill": {
     "duration": 0.247999,
     "end_time": "2023-11-17T18:54:19.882860",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.634861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Confusion Matrix for SVC')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display confusioni matrix for SVC\n",
    "\n",
    "sns.set_style('ticks')\n",
    "ConfusionMatrixDisplay(confusion_matrix(y_test,pred_svc)).plot()\n",
    "plt.title(\"Confusion Matrix for SVC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d6aaa875",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-17T18:54:19.902948Z",
     "iopub.status.busy": "2023-11-17T18:54:19.902558Z",
     "iopub.status.idle": "2023-11-17T19:01:35.520514Z",
     "shell.execute_reply": "2023-11-17T19:01:35.518390Z"
    },
    "papermill": {
     "duration": 435.639699,
     "end_time": "2023-11-17T19:01:35.531635",
     "exception": false,
     "start_time": "2023-11-17T18:54:19.891936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Scores for each fold: [0.98937198 0.98742747 0.99323017 0.98549323 0.99129594]\n",
      "Average CV Score: 0.9893637578373934\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Number of folds\n",
    "k = 5\n",
    "\n",
    "# Initialize the SVC model in the pipeline\n",
    "pipe_svc.set_params(classifier=SVC())\n",
    "\n",
    "# Perform k-fold cross-validation\n",
    "cv_scores = cross_val_score(pipe_svc, X, y, cv=k)\n",
    "\n",
    "# Output the results\n",
    "print(f'CV Scores for each fold: {cv_scores}')\n",
    "print(f'Average CV Score: {np.mean(cv_scores)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09efde26",
   "metadata": {
    "papermill": {
     "duration": 0.009011,
     "end_time": "2023-11-17T19:01:35.550580",
     "exception": false,
     "start_time": "2023-11-17T19:01:35.541569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 483,
     "sourceId": 982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 91827,
     "sourceId": 213216,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 109196,
     "sourceId": 260807,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 547699,
     "sourceId": 998616,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1904602,
     "sourceId": 3123717,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 700.970685,
   "end_time": "2023-11-17T19:01:36.285675",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-11-17T18:49:55.314990",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
